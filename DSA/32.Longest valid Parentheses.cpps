int longestValidParentheses(const string& s) {
    int maxLen = 0;
    stack<int> st;
    st.push(-1); // Base index for calculation

    for (int i = 0; i < s.length(); ++i) {
        if (s[i] == '(') {
            st.push(i);
        } else {
            st.pop();
            if (st.empty()) {
                // If stack is empty, push the current index as the new base
                st.push(i);
            } else {
                // Calculate the length of the valid substring
                maxLen = max(maxLen, i - st.top());
            }
        }
    }

    return maxLen;
}
